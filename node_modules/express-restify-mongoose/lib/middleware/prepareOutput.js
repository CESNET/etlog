'use strict';

var _ = require('lodash');
var async = require('async');

module.exports = function (options, excludedMap) {
  var errorHandler = require('../errorHandler')(options);

  return function (req, res, next) {
    var postMiddleware = void 0;

    switch (req.method.toLowerCase()) {
      case 'get':
        postMiddleware = options.postRead;
        break;
      case 'post':
        if (req.erm.statusCode === 201) {
          postMiddleware = options.postCreate;
        } else {
          postMiddleware = options.postUpdate;
        }
        break;
      case 'put':
      case 'patch':
        postMiddleware = options.postUpdate;
        break;
      case 'delete':
        postMiddleware = options.postDelete;
        break;
    }

    async.eachSeries(postMiddleware, function (middleware, cb) {
      middleware(req, res, cb);
    }, function (err) {
      if (err) {
        return errorHandler(req, res, next)(err);
      }

      // TODO: this will, but should not, filter /count queries
      if (req.erm.result) {
        var opts = {
          access: req.access,
          excludedMap: excludedMap,
          populate: req._ermQueryOptions ? req._ermQueryOptions.populate : null
        };

        req.erm.result = options.filter ? options.filter.filterObject(req.erm.result, opts) : req.erm.result;
      }

      if (options.totalCountHeader && req.erm.totalCount) {
        res.header(_.isString(options.totalCountHeader) ? options.totalCountHeader : 'X-Total-Count', req.erm.totalCount);
      }

      options.outputFn(req, res);

      if (options.postProcess) {
        options.postProcess(req, res, next);
      }
    });
  };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL3ByZXBhcmVPdXRwdXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNLElBQUksUUFBUSxRQUFSLENBQVY7QUFDQSxJQUFNLFFBQVEsUUFBUSxPQUFSLENBQWQ7O0FBRUEsT0FBTyxPQUFQLEdBQWlCLFVBQVUsT0FBVixFQUFtQixXQUFuQixFQUFnQztBQUMvQyxNQUFNLGVBQWUsUUFBUSxpQkFBUixFQUEyQixPQUEzQixDQUFyQjs7QUFFQSxTQUFPLFVBQVUsR0FBVixFQUFlLEdBQWYsRUFBb0IsSUFBcEIsRUFBMEI7QUFDL0IsUUFBSSx1QkFBSjs7QUFFQSxZQUFRLElBQUksTUFBSixDQUFXLFdBQVgsRUFBUjtBQUNFLFdBQUssS0FBTDtBQUNFLHlCQUFpQixRQUFRLFFBQXpCO0FBQ0E7QUFDRixXQUFLLE1BQUw7QUFDRSxZQUFJLElBQUksR0FBSixDQUFRLFVBQVIsS0FBdUIsR0FBM0IsRUFBZ0M7QUFDOUIsMkJBQWlCLFFBQVEsVUFBekI7QUFDRCxTQUZELE1BRU87QUFDTCwyQkFBaUIsUUFBUSxVQUF6QjtBQUNEO0FBQ0Q7QUFDRixXQUFLLEtBQUw7QUFDQSxXQUFLLE9BQUw7QUFDRSx5QkFBaUIsUUFBUSxVQUF6QjtBQUNBO0FBQ0YsV0FBSyxRQUFMO0FBQ0UseUJBQWlCLFFBQVEsVUFBekI7QUFDQTtBQWpCSjs7QUFvQkEsVUFBTSxVQUFOLENBQWlCLGNBQWpCLEVBQWlDLFVBQUMsVUFBRCxFQUFhLEVBQWIsRUFBb0I7QUFDbkQsaUJBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFxQixFQUFyQjtBQUNELEtBRkQsRUFFRyxVQUFDLEdBQUQsRUFBUztBQUNWLFVBQUksR0FBSixFQUFTO0FBQ1AsZUFBTyxhQUFhLEdBQWIsRUFBa0IsR0FBbEIsRUFBdUIsSUFBdkIsRUFBNkIsR0FBN0IsQ0FBUDtBQUNEOztBQUVEO0FBQ0EsVUFBSSxJQUFJLEdBQUosQ0FBUSxNQUFaLEVBQW9CO0FBQ2xCLFlBQUksT0FBTztBQUNULGtCQUFRLElBQUksTUFESDtBQUVULHVCQUFhLFdBRko7QUFHVCxvQkFBVSxJQUFJLGdCQUFKLEdBQXVCLElBQUksZ0JBQUosQ0FBcUIsUUFBNUMsR0FBdUQ7QUFIeEQsU0FBWDs7QUFNQSxZQUFJLEdBQUosQ0FBUSxNQUFSLEdBQWlCLFFBQVEsTUFBUixHQUFpQixRQUFRLE1BQVIsQ0FBZSxZQUFmLENBQTRCLElBQUksR0FBSixDQUFRLE1BQXBDLEVBQTRDLElBQTVDLENBQWpCLEdBQXFFLElBQUksR0FBSixDQUFRLE1BQTlGO0FBQ0Q7O0FBRUQsVUFBSSxRQUFRLGdCQUFSLElBQTRCLElBQUksR0FBSixDQUFRLFVBQXhDLEVBQW9EO0FBQ2xELFlBQUksTUFBSixDQUFXLEVBQUUsUUFBRixDQUFXLFFBQVEsZ0JBQW5CLElBQXVDLFFBQVEsZ0JBQS9DLEdBQWtFLGVBQTdFLEVBQThGLElBQUksR0FBSixDQUFRLFVBQXRHO0FBQ0Q7O0FBRUQsY0FBUSxRQUFSLENBQWlCLEdBQWpCLEVBQXNCLEdBQXRCOztBQUVBLFVBQUksUUFBUSxXQUFaLEVBQXlCO0FBQ3ZCLGdCQUFRLFdBQVIsQ0FBb0IsR0FBcEIsRUFBeUIsR0FBekIsRUFBOEIsSUFBOUI7QUFDRDtBQUNGLEtBM0JEO0FBNEJELEdBbkREO0FBb0RELENBdkREIiwiZmlsZSI6InByZXBhcmVPdXRwdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJylcclxuY29uc3QgYXN5bmMgPSByZXF1aXJlKCdhc3luYycpXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBleGNsdWRlZE1hcCkge1xyXG4gIGNvbnN0IGVycm9ySGFuZGxlciA9IHJlcXVpcmUoJy4uL2Vycm9ySGFuZGxlcicpKG9wdGlvbnMpXHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcclxuICAgIGxldCBwb3N0TWlkZGxld2FyZVxyXG5cclxuICAgIHN3aXRjaCAocmVxLm1ldGhvZC50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgIGNhc2UgJ2dldCc6XHJcbiAgICAgICAgcG9zdE1pZGRsZXdhcmUgPSBvcHRpb25zLnBvc3RSZWFkXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAncG9zdCc6XHJcbiAgICAgICAgaWYgKHJlcS5lcm0uc3RhdHVzQ29kZSA9PT0gMjAxKSB7XHJcbiAgICAgICAgICBwb3N0TWlkZGxld2FyZSA9IG9wdGlvbnMucG9zdENyZWF0ZVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBwb3N0TWlkZGxld2FyZSA9IG9wdGlvbnMucG9zdFVwZGF0ZVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdwdXQnOlxyXG4gICAgICBjYXNlICdwYXRjaCc6XHJcbiAgICAgICAgcG9zdE1pZGRsZXdhcmUgPSBvcHRpb25zLnBvc3RVcGRhdGVcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdkZWxldGUnOlxyXG4gICAgICAgIHBvc3RNaWRkbGV3YXJlID0gb3B0aW9ucy5wb3N0RGVsZXRlXHJcbiAgICAgICAgYnJlYWtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYy5lYWNoU2VyaWVzKHBvc3RNaWRkbGV3YXJlLCAobWlkZGxld2FyZSwgY2IpID0+IHtcclxuICAgICAgbWlkZGxld2FyZShyZXEsIHJlcywgY2IpXHJcbiAgICB9LCAoZXJyKSA9PiB7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3JIYW5kbGVyKHJlcSwgcmVzLCBuZXh0KShlcnIpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRPRE86IHRoaXMgd2lsbCwgYnV0IHNob3VsZCBub3QsIGZpbHRlciAvY291bnQgcXVlcmllc1xyXG4gICAgICBpZiAocmVxLmVybS5yZXN1bHQpIHtcclxuICAgICAgICBsZXQgb3B0cyA9IHtcclxuICAgICAgICAgIGFjY2VzczogcmVxLmFjY2VzcyxcclxuICAgICAgICAgIGV4Y2x1ZGVkTWFwOiBleGNsdWRlZE1hcCxcclxuICAgICAgICAgIHBvcHVsYXRlOiByZXEuX2VybVF1ZXJ5T3B0aW9ucyA/IHJlcS5fZXJtUXVlcnlPcHRpb25zLnBvcHVsYXRlIDogbnVsbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVxLmVybS5yZXN1bHQgPSBvcHRpb25zLmZpbHRlciA/IG9wdGlvbnMuZmlsdGVyLmZpbHRlck9iamVjdChyZXEuZXJtLnJlc3VsdCwgb3B0cykgOiByZXEuZXJtLnJlc3VsdFxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy50b3RhbENvdW50SGVhZGVyICYmIHJlcS5lcm0udG90YWxDb3VudCkge1xyXG4gICAgICAgIHJlcy5oZWFkZXIoXy5pc1N0cmluZyhvcHRpb25zLnRvdGFsQ291bnRIZWFkZXIpID8gb3B0aW9ucy50b3RhbENvdW50SGVhZGVyIDogJ1gtVG90YWwtQ291bnQnLCByZXEuZXJtLnRvdGFsQ291bnQpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG9wdGlvbnMub3V0cHV0Rm4ocmVxLCByZXMpXHJcblxyXG4gICAgICBpZiAob3B0aW9ucy5wb3N0UHJvY2Vzcykge1xyXG4gICAgICAgIG9wdGlvbnMucG9zdFByb2Nlc3MocmVxLCByZXMsIG5leHQpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG59XHJcbiJdfQ==
//# sourceMappingURL=prepareOutput.js.map