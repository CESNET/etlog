#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('radlog:server');
var http = require('http');
var https = require('https');
var fs = require( 'fs' );

/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '3000');
var https_port = 8443;
var http_port = 8080;
app.set('https_port', https_port);
app.set('http_port', http_port);


/**
 * Set up HTTPS.
 */

var https_options = {
  key:  fs.readFileSync('cert/etlog.cesnet.cz.key.pem', 'utf-8'),
  cert: fs.readFileSync('cert/etlog.cesnet.cz.crt.pem', 'utf-8'),
  ca: [
    fs.readFileSync('/etc/ssl/certs/TERENA_SSL_CA_2.pem', 'utf8'),
    fs.readFileSync('/etc/ssl/certs/USERTrust_RSA_Certification_Authority.pem', 'utf8')
  ]
};

/**
 * Create HTTPS server.
 */

var server = https.createServer(https_options, app);


/**
 * Create HTTP server.
 */
// Redirect from http port 80 to https
http.createServer(function (req, res) {
  res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });   // does not work for http 1.0 - no host http header
  res.end();
}).listen(app.get('http_port'));


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(app.get('https_port'));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
